// Generated by CoffeeScript 1.10.0
(function() {
  var Atom, CallNode, DefineNode, _id, parse,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _id = 0;

  Atom = (function() {
    function Atom(name1) {
      this.name = name1;
      this.id = _id++;
    }

    Atom.prototype.substitute = function(name, value, record, excludes) {
      var newValue;
      if (excludes == null) {
        excludes = [];
      }
      if (name === this.name && indexOf.call(excludes, name) < 0) {
        newValue = value.clone();
        record.changes.push({
          old: this,
          "new": newValue
        });
        return newValue;
      } else {
        return new Atom(this.name);
      }
    };

    Atom.prototype.serialize = function() {
      var result;
      result = this.name;
      return result;
    };

    Atom.prototype.render = function() {
      this.element = document.createElement('div');
      this.element.className = 'atom';
      this.element.innerText = this.name;
      return this.element;
    };

    Atom.prototype.reduce = function() {
      return this;
    };

    Atom.prototype.reducible = function() {
      return false;
    };

    Atom.prototype.clone = function() {
      return new Atom(this.name);
    };

    return Atom;

  })();

  CallNode = (function() {
    function CallNode(fn, arg) {
      this.fn = fn;
      this.arg = arg;
      this.id = _id++;
    }

    CallNode.prototype.render = function() {
      this.element = document.createElement('div');
      this.element.className = 'call-node';
      this.element.appendChild(this.fn.render());
      this.element.appendChild(this.arg.render());
      return this.element;
    };

    CallNode.prototype.substitute = function(name, value, record, excludes) {
      if (excludes == null) {
        excludes = [];
      }
      return new CallNode(this.fn.substitute(name, value, record, excludes), this.arg.substitute(name, value, record, excludes));
    };

    CallNode.prototype.reduce = function(record) {
      if (this.fn instanceof DefineNode) {
        record.resolved = this;
        record.result = this.fn.body.substitute(this.fn.param, this.arg, record);
        return record.result;
      } else if (this.fn instanceof CallNode) {
        return new CallNode(this.fn.reduce(record), this.arg);
      } else {
        return new CallNode(this.fn, this.arg.reduce(record));
      }
    };

    CallNode.prototype.reducible = function() {
      if (this.fn instanceof DefineNode) {
        return true;
      } else if (this.fn instanceof CallNode) {
        return true;
      } else {
        return this.arg.reducible();
      }
    };

    CallNode.prototype.serialize = function() {
      var result;
      result = "(" + (this.fn.serialize()) + " " + (this.arg.serialize()) + ")";
      return result;
    };

    CallNode.prototype.clone = function() {
      return new CallNode(this.fn.clone(), this.arg.clone());
    };

    return CallNode;

  })();

  DefineNode = (function() {
    function DefineNode(param1, body1) {
      this.param = param1;
      this.body = body1;
      this.id = _id++;
    }

    DefineNode.prototype.render = function() {
      this.element = document.createElement('div');
      this.element.className = 'define-node';
      this.paramElement = document.createElement('div');
      this.paramElement.className = 'param';
      this.paramElement.innerText = this.param;
      this.element.appendChild(this.paramElement);
      this.element.appendChild(this.body.render());
      return this.element;
    };

    DefineNode.prototype.substitute = function(name, value, record, excludes) {
      if (excludes == null) {
        excludes = [];
      }
      return new DefineNode(this.param, this.body.substitute(name, value, record, excludes.concat([this.param])));
    };

    DefineNode.prototype.serialize = function() {
      var result;
      result = "\u03BB" + this.param + "." + (this.body.serialize());
      return result;
    };

    DefineNode.prototype.reduce = function(record) {
      return new DefineNode(this.param, this.body.reduce(record));
    };

    DefineNode.prototype.reducible = function() {
      return this.body.reducible();
    };

    DefineNode.prototype.clone = function() {
      return new DefineNode(this.param, this.body.clone());
    };

    return DefineNode;

  })();

  parse = function(str) {
    var body, depth, i, param, prefix, suffix;
    str = str.trim();
    if (str[0] === '(') {
      depth = 0;
      i = 1;
      while (!(depth === 0 && str[i] === ' ')) {
        if (str[i] === ')') {
          depth += -1;
        }
        if (str[i] === '(') {
          depth += 1;
        }
        i += 1;
      }
      prefix = str.slice(1, i);
      suffix = str.slice(i + 1, -1);
      return new CallNode(parse(prefix), parse(suffix));
    } else if (str[0] === '\u03BB') {
      param = str.slice(1, str.indexOf('.'));
      body = str.slice(str.indexOf('.') + 1);
      return new DefineNode(param, parse(body));
    } else {
      return new Atom(str);
    }
  };


  /*
  evaluate = (node) ->
    while node.reducible()
      console.log node.serialize()
      node = node.clearFlags()
      node = node.reduce()
    console.log node.serialize()
  
  evaluate parse '(lsucc.(succ (succ (succ lx.ly.y))) ln.lf.lx.(f ((n f) x)))'.replace(/l/g, '\u03BB')
   */

  document.getElementById('go').addEventListener('click', function() {
    var div, output, text, tick, tree;
    text = document.getElementById('input').value;
    tree = parse(text.replace(/l/g, '\u03BB'));
    output = document.getElementById('output');
    output.innerHTML = '';
    div = document.createElement('div');
    div.className = 'output-row';
    div.appendChild(tree.render());
    output.appendChild(div);
    output.appendChild(document.createElement('hr'));
    tick = function() {
      var el, i, j, len, newtree, record, ref;
      record = {
        changes: [],
        resolved: null,
        result: null
      };
      if (tree.reducible()) {
        tree = tree.clone();
        div = document.createElement('div');
        div.className = 'output-row';
        div.appendChild(tree.render());
        output.appendChild(div);
        newtree = tree.reduce(record);
        div = document.createElement('div');
        div.className = 'output-row';
        div.appendChild(newtree.render());
        output.appendChild(div);
        ref = record.changes;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          el = ref[i];
          el.old.element.className += ' old';
          el["new"].element.className += ' new';
        }
        record.resolved.element.className += ' resolved-parent';
        record.resolved.fn.body.element.className += ' resolved';
        record.resolved.arg.element.className += ' new';
        record.result.element.className += ' resolved';
        output.appendChild(document.createElement('hr'));
        tree = newtree;
        return setTimeout(tick, 100);
      }
    };
    return tick();
  });

}).call(this);
